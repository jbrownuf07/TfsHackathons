{
    "contents" : "\n# This is the server logic for a Shiny web application.\n# You can find out more about building applications with Shiny here:\n#\n# http://shiny.rstudio.com\n#\n\nlibrary(shiny)\nlibrary(RCurl)\nrequire(jsonlite)\n\nsource('functions.R')\n\nshinyServer(function(input, output, session) {\n  \n  getDatasets <- reactive({\n    ds <- fromJSON('https://vjs06p01f8.execute-api.us-east-1.amazonaws.com/xtopia/measurements')\n    ds\n  })\n  \n  getPeaks <- reactive({\n    id <- '91e4da90-7b35-4e41-b45f-8cada43a8d6d'\n    if (!is.null(input$mydatasets_row_selected)) {\n      s <- input$mydatasets_rows_selected\n      val <- getDatasets()\n      id <- unlist(subset(val, Project == input$datasetTable, select='MeasurementId'))[s]\n    }\n    \n    peaks <- fromJSON(paste('https://vjs06p01f8.execute-api.us-east-1.amazonaws.com/xtopia/features/', id, sep = ''))\n    peaks\n  })\n  \n  loadDataFiles <- reactive({\n    if (is.null(input$datasetTable))\n      return()\n    \n    availableProjects <- processRefresh()\n    selectedDataset <- input$datasetTable\n    filteredDatasets <- subset(availableProjects, Project == selectedDataset)\n    updateSelectInput(session, 'datafileTable', choices = selectedDataset)\n  })\n  \n  \n  processRefresh <- reactive({\n    vals <- getDatasets()\n    projectNames <- sort(unique(vals$Project))\n    updateSelectInput(session, 'datasetTable', choices = projectNames)\n  })\n  \n  output$datafileTable <- reactive({\n    vals <- getDatasets()\n    selectedProject <- unlist(subset(vals, Project == input$datasetTable, select = c('FileName')))\n    selectedProject\n  })\n  \n  output$mydatasets <- DT::renderDataTable({\n    if (is.null(input$datasetTable) && length(input$datasetTable) == 1)\n      return()\n    \n    vals <- getDatasets()\n    selectedProject <- subset(vals, Project == input$datasetTable,\n                              select = c(\n                                'Project',\n                                'Filename',\n                                'LowMass',\n                                'HighMass',\n                                'Scans',\n                                'AcquisitionDate',\n                                'Tags',\n                                'MaxIntensity',\n                                'MeasurementId',\n                                'EndTime'\n                              ))\n    selectedProject\n  }, server = FALSE, selection = 'single')\n  \n#   # Refresh button has been pushed\n  observeEvent(\n    input$refreshDatasetsButton,\n    {\n      processRefresh()\n    }\n  )\n  \n  observeEvent(\n    input$runXtopiaButton,\n    {\n      id <- '91e4da90-7b35-4e41-b45f-8cada43a8d6d'\n      if (!is.null(input$mydatasets_row_selected)) {\n        s <- input$mydatasets_rows_selected\n        val <- getDatasets()\n        id <- unlist(subset(val, Project == input$datasetTable, select='MeasurementId'))[s]\n      }\n      \n      uri <- paste('https://vjs06p01f8.execute-api.us-east-1.amazonaws.com/xtopia/features/',\n                   id, sep = '')\n      postForm(uri)\n    }\n  )\n  \n  output$selectedDatafileName <- renderText({\n    s <- input$mydatasets_rows_selected\n    val <- getDatasets()\n    fileName <- unlist(subset(val, Project == input$datasetTable, select='Filename'))[s]\n    fileName\n  })\n  \n  output$peaksPlot <- renderPlot({\n    observedPeaks <- getPeaks()\n    hist(observedPeaks[[1]]$Width,\n         xlab = 'Width (min)',\n         main = 'Peak Width', \n         col = 'lightblue')\n  })\n  \n  output$selectedFile <- renderPrint({\n    s <- input$mydatasets_rows_selected\n    val <- getDatasets()\n    fileName <- unlist(subset(val, Project == input$datasetTable, select='Filename'))[s]\n    if (length(s)) {\n      cat('Selected: ')\n      cat(fileName)\n    }\n  })\n})\n",
    "created" : 1449856700134.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3789860918",
    "id" : "4468B016",
    "lastKnownWriteTime" : 1449880192,
    "path" : "C:/ussjo_tfs13/SciLibApp/Development/Dev-Joe/RPackages/ShinyIsotopeClusteringViz/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "type" : "r_source"
}
{
    "contents" : "\n# This is the server logic for a Shiny web application.\n# You can find out more about building applications with Shiny here:\n#\n# http://shiny.rstudio.com\n#\n\n# Example data links\n# https://vjs06p01f8.execute-api.us-east-1.amazonaws.com/xtopia/measurements\n# \n# https://vjs06p01f8.execute-api.us-east-1.amazonaws.com/xtopia/clusters/91e4da90-7b35-4e41-b45f-8cada43a8d6d\n# \n# https://vjs06p01f8.execute-api.us-east-1.amazonaws.com/xtopia/features/91e4da90-7b35-4e41-b45f-8cada43a8d6d\n\nlibrary(shiny)\nlibrary(RCurl)\nrequire(jsonlite)\nlibrary(plotly)\nlibrary(ggplot2)\n\n# source('functions.R')\n\nshinyServer(function(input, output, session) {\n  \n  serverAddress <- 'https://vjs06p01f8.execute-api.us-east-1.amazonaws.com/xtopia'\n  \n  \n  getDatasets <- reactive({\n    ds <- fromJSON('https://vjs06p01f8.execute-api.us-east-1.amazonaws.com/xtopia/measurements')\n    ds\n  })\n  \n  # Get the XIC information as a data.frame\n  getXics <- reactive({\n    xic <- fromJSON(paste(serverAddress, 'clusters', getID(), sep = '/'))[[1]]\n    updateSelectInput(session, 'massSelector', choices = sort(unique(xic$MZ)))\n    xic\n  })\n  \n  \n  getFeatures <- reactive({\n    features <- fromJSON(paste(serverAddress, 'features', getID(), sep = '/'))[[1]]\n    features\n  })\n  \n  getID <- reactive({\n    id <- '91e4da90-7b35-4e41-b45f-8cada43a8d6d'\n#     if (nchar(input$datasetTable) > 0 & nchar(input$datafileTable) > 0) {\n#       id <- as.character(subset(getDatasets(), \n#                    Project == input$datasetTable & Filename == input$datafileTable,\n#                    select = 'MeasurementId'))\n#     }\n    id\n  })\n  \n  \n  \n  \n  \n  output$xicPlot <- renderPlotly(({\n    \n    gg <- ggplot(data = getXics(), aes(x = RT, y = Intensity, group = 1)) + geom_line()\n    \n    p <- ggplotly(gg)\n    p\n  }))\n  \n  output$featuresPlot <- renderPlotly({\n    gg <- qplot(Width, data=getFeatures(), geom=\"histogram\")\n    \n    p <- ggplotly(gg)\n    p\n  })\n  \n  loadDataFiles <- reactive({\n    if (is.null(input$datasetTable))\n      return()\n    \n    availableProjects <- processRefresh()\n    selectedDataset <- input$datasetTable\n    filteredDatasets <- subset(availableProjects, Project == selectedDataset)\n  })\n  \n  \n  processRefresh <- reactive({\n    vals <- getDatasets()\n    projectNames <- sort(unique(vals$Project))\n    updateSelectInput(session, 'datasetTable', choices = projectNames)\n  })\n  \n#   # Refresh button has been pushed\n  observeEvent(\n    input$refreshDatasetsButton,\n    {\n      processRefresh()\n    }\n  )\n  \n  observeEvent(\n    input$datasetTable,\n    {\n      if (nchar(input$datasetTable) > 0) {\n        \n        vals <- getDatasets()\n        \n        if (nrow(vals) > 0) {\n          \n            selectedDS <- input$datasetTable\n            selectedDatasetFiles <- subset(vals, Project == selectedDS, select = c('Filename'))\n            updateSelectInput(session, 'datafileTable', choices = selectedDatasetFiles)\n        }\n      }\n    }\n  )\n  \n  # Run Xtopia\n  observeEvent(\n    input$runXtopiaButton,\n    {\n      id <- '91e4da90-7b35-4e41-b45f-8cada43a8d6d'\n      if (!is.null(input$mydatasets_row_selected)) {\n        s <- input$mydatasets_rows_selected\n        val <- getDatasets()\n        id <- unlist(subset(val, Project == input$datasetTable, select='MeasurementId'))[s]\n      }\n      \n      uri <- paste('https://vjs06p01f8.execute-api.us-east-1.amazonaws.com/xtopia/features/',\n                   getID(), sep = '')\n      postForm(uri)\n    }\n  )\n  \n  observeEvent(\n    input$refreshResultMassesButton,\n    {\n      # console.log('Refreshing masses')\n      print('Refreshing masses')\n      xics <- getXics()\n      updateSelectInput(session, 'massSelector', choices = sort(unique(xics$MZ)))\n    }\n  )\n})\n",
    "created" : 1450459277434.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1503051083",
    "id" : "2D354959",
    "lastKnownWriteTime" : 1451450366,
    "path" : "~/Documents/R_Projects/Shiny_Apps/ShinyIsotopeClusteringViz/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "type" : "r_source"
}